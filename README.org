
#+STARTUP: showall

#+TAGS: TOC(t)

* Table of contents                                                     :TOC_2_gh:
- [[#introduction][Introduction]]
  - [[#important-note-for-version-1-users][important note for version 1 users]]
  - [[#history][history]]
  - [[#goal][goal]]
- [[#installation][installation]]
  - [[#version-2][version 2]]
  - [[#version-1][version 1]]
- [[#step-by-step][step by step]]
  - [[#first-circles][first circles]]
  - [[#moving-around][moving around]]
  - [[#square-the-circle][square the circle]]
  - [[#splits][splits]]
- [[#key-bindings][key bindings]]
  - [[#levels][levels]]
  - [[#list-of-bindings][list of bindings]]
  - [[#shortcuts][shortcuts]]
- [[#mouse][mouse]]
  - [[#on-the-tab-bar][on the tab bar]]
- [[#configuration][configuration]]
  - [[#use-package][Use-package]]
- [[#technical][Technical]]
  - [[#structure][Structure]]
- [[#changelog][Changelog]]
- [[#author--licence][Author & Licence]]
- [[#warning][Warning]]

* Introduction

If you ever dreamed about creating and switching buffer groups at will
in Emacs, [[https://github.com/chimay/torus][Torus]] is the tool you want.

In short, this plugin let you organize your buffers by creating as
many buffer groups as you need, add the buffers you want to it and
quickly navigate between :

  - Buffers of the same group

  - Buffer groups

  - Workspaces, ie sets of buffer groups

Note that :

  - A Location is a pair (filename . position)

  - A buffer group, in fact a location group, is called a Circle

  - A list of buffer groups is called a Torus (a Circle of Circles)

  - The list of toruses is called the Wheel


** important note for version 1 users

the version 2 of torus is built using the duo library of inplace list
operations. it means a cleaner code, easier to maintain and extend,
but also a drastic change in the data structure.

in particular, the format of torus files has changed, so it is
recommended to backup your version 1 torus files, just in case
something would go wrong with the conversion.


** history

this project is inspired by mtorus. you can find the original sources
on the links below :

  - the repository of stefan kamphausen, the orignal author, is
    available at https://www.skamphausen.de/cgi-bin/ska/mtorus

  - the rewrite by sebastian freundt is available on
    https://sourceforge.net/projects/mtorus.berlios/

  - i’ve a personal fork of the second one :
    https://github.com/chimay/mtorus, but i won’t maintain it anymore

i decided to write a new version from scratch, easier to maintain and
to add new features.


** goal

torus helps you to organize your files in groups that you create
yourself, following your workflow. you only add the files you want,
where you want. for instance, if you have a "organize" group with
agenda & todo files, you can quickly alternate them, or display them
in two windows. then, if you suddenly got an idea to tune emacs, you
switch to the "emacs" group with your favorites configuration files in
it. same process, to cycle, alternate or display the files. note that
the toruses containing all these groups can be saved on a file and
loaded later. over time, your groups will grow and adapt to your
style.


* installation


** version 2


*** using [[https://github.com/raxod502/straight.el][straight.el]]

add these lines in your init file :

#+begin_src emacs-lisp
  ;; recommended
  (straight-use-package 'which-key)
  (straight-use-package 'helm)
  ;; necessary
  (straight-use-package '(duo :type git :host github :repo "chimay/duo"))
  (straight-use-package '(torus :type git :host github :branch "version-2" :repo "chimay/torus"))
#+end_src


*** manually

first, you need to clone the [[https://github.com/chimay/duo][duo]] library :

#+begin_src shell
git clone https://github.com/chimay/duo
#+end_src

and copy at least the files =duo-common.el= and =duo-referen.el= to a
folder belonging to your emacs load-path, let’s say =~/.emacs/plug= :

#+begin_src shell
cp duo-common.el duo-referen.el ~/.emacs/plug
#+end_src

then, clone the [[https://github.com/chimay/torus][torus]] repository :

#+begin_src shell
git clone https://github.com/chimay/torus
#+end_src

and switch to version-2 branch :

#+begin_src shell
git checkout version-2
#+end_src

finally, copy the file =torus.el= to the same folder :

#+begin_src shell
cp torus.el ~/.emacs/plug
#+end_src

and restart emacs, or just =eval-buffer= the duo and torus files.


*** using [[https://github.com/dimitri/el-get][el-get]]

if you use el-get, just create the recipe files ~duo.rcp~ :

#+begin_src emacs-lisp
(:name duo
       :website "http://github.com/chimay/duo"
       :description "in place list operations in elisp"
       :branch "master"
       :depends ()
       :type github
       :pkgname "chimay/duo")
#+end_src

and ~torus.rcp~ :

#+begin_src emacs-lisp
  (:name torus
         :website "http://github.com/chimay/torus"
         :description "buffer groups manager"
         :branch "version-2"
         :depends (duo)
         :type github
         :pkgname "chimay/torus")
#+end_src

then, add them to a directory present in ~el-get-recipe-path~ and use
~m-x el-get-install <ret> torus~ or add :

#+begin_src emacs-lisp
(el-get-bundle torus)
#+end_src

to your init file.


** version 1

please refer to the readme of version 1.


* step by step


** first circles

let’s say we have the files =juice=, =tea=, =coffee=. we can add them
to the torus with ~torus-add-here~. if this is your first torus or
circle, it will ask names for them. so, we go to =juice= and use
~torus-add-here~. let’s say we name the torus =food= and the circle
=drinks=. then, we go to =tea= and add it to =drinks= using the same
function. same process with =coffee=. we now have a circle =drink=
containing three files.

if your files are not already opened in buffers, just use
~torus-add-file~ to add them in the circle.

if you want to create another circle, let’s say =fruits=, simply
launch ~torus-add-circle~ again, and enter another name. you can then
add the files =apple=, =pear= and =orange= to it. you can even also
add =juice=, a file can be added to more than one circle.

now, suppose that in the =juice= file, you have a pineapple and a
mango sections, and you want to compare them. just go to the pineapple
section, use ~torus-add-here~. it will add the location
(=juice . pineapple-position=) to the current circle. then, go to the
mango section, and do the same. the (=juice . mango-position=) will
also be added to the circle. you can then easily alternate both, or
display them in split windows.


** moving around

you can cycle the files of a circle with ~torus-next-location~ and
~torus-previous-location~. you can also switch file with completion by using
~torus-switch-location~. it works well with helm.

to cycle the circles, use ~torus-next-circle~ and
~torus-previous-circle~. to go to a given circle with completion, use
~torus-switch-circle~.

same thing to cycle the toruses, with ~torus-next-torus~ and
~torus-previous-torus~. to go to a given torus with completion, use
~torus-switch-torus~.


** square the circle

over time, the number of circles will grow. completion is great, but
if you just want to alternate the two last circles in history, you’ll
probably prefer ~torus-alternate-in-same-torus-other-circle~. you can
also alternate two last files inside the same circle with
~torus-alternate-in-same-circle~. so, you have the square :

| circle 1, file 1 | circle 1, file 2 |
| circle 2, file 3 | circle 2, file 4 |

at your fingertips.

finally, ~torus-alternate~ alternate two last history
files, regardless of their circles.


** splits

if you prefix a torus navigation function by c-u, the asked file will
be opened in a new window below. with c-u c-u, it will be in a new
window on the right.

if you want to see all the circle files in separate windows, use
~torus-layout-menu~ and chose between horizontal, vertical or grid
splits. you also have layouts with main window on left, right, top or
bottom side.

your choice is remembered by torus for the current circle. you can
swith back to one window using the same layout function. the special
choice "manual" ask torus not to interfere in your layout.

the maximum number of windows generated by the split functions
are conxtrolled by the vars ~torus-maximum-horizontal-split~ and
~torus-maximum-vertical-split~.


* key bindings

all bindings are available after the prefix key =<super-t>= by
default. you can see them by pressing <super-t><c-h>, or by installing
[[https://github.com/justbur/emacs-which-key][which-key]]. you can also define your own :

#+begin_src emacs-lisp
  (define-key torus-map (kbd "a") 'torus-add-here)
#+end_src


** levels

the option ~torus-binding-level~, an integer between 0 and 3, decide
how many functions will be bound to keys : the higher it is, the more
bindings available :

  - level 0 : basic

  - level 1 : common

  - level 2 : advanced

  - level 3 : debug

level 1 or 2 is fine for most usages.


** list of bindings


*** level 0

enter the prefix key, then :

  - =a= : add current file & position

  - =c-a= : add new circle

  - =a= : add new torus

  - =s-a= : add menu

    + =h= : add here : current file & location

    + =f= : add file

    + =b= : add buffer

    + =l= : add location

    + =c= : add circle

    + =t= : add torus

  - =<left>= : go to previous location

  - =<right>= : go to next location

  - =<up>= : go to previous circle

  - =<down>= : go to next circle

  - =<s-up>= : go to previous torus

  - =<s-down>= : go to next torus

  - =r= : read torus variables from file

  - =w= : write torus variables to file


*** level 1

enter the prefix key, then :

  - =n= : rename file

  - =c-n= : rename circle

  - =n= : rename torus

  - =d= : delete location

  - =c-d= : delete circle

  - =d= : delete torus

  - =spc= : switch location with completion

  - =c-spc= : switch circle with completion

  - =s-spc= : switch torus with completion

  - =s-spc= : switch menu

    + =l= : switch location

    + =c= : switch circle

    + =t= : switch torus

  - =s= : search location in the wheel (in all toruses)

  - =c-s= : search circle in the wheel (in all toruses)

  - =^= : alternate last two locations

  - =s-^= : alternate menu

    + =^= : alternate last two locations

    + =c= : alternate last two locations in same circle

    + =i= : alternate last two locations in distinct circles

    + =t= : alternate last two locations in same torus

    + =o= : alternate last two locations in distinct toruses

    + =r= : alternate last two locations in same torus but different circle

  - =<prior>= : newer location in history

  - =<next>= : older location in history

  - =<c-left>= : move location backward

  - =<c-right>= : move location forward

  - =<c-up>= : move circle backward

  - =<c-down>= : move circle forward

  - =<c-s-up>= : move torus backward

  - =<c-s-down>= : move torus forward

  - =m= : move location after a given one

  - =c-m= : move circle after a given one

  - =m= : move torus after a given one


*** level 2

enter the prefix key, then :

  - =o= : move location to another circle

  - =o= : move circle to another torus

  - =y= : copy location to another circle

  - =y= : copy circle to another torus

  - =<m-left>= : rotate circle to the left

  - =<m-right>= : rotate circle to the right

  - =<m-up>= : rotate torus to the left

  - =<m-down>= : rotate torus to the right

  - =<m-s-up>= : rotate wheel to the left

  - =<m-s-down>= : rotate wheel to the right

  - =v= : reverse circle

  - =c-v= : reverse torus

  - =v= : reverse wheel

  - =-= : split menu

  - =!= : batch menu

  - =g= : autogroup menu


*** level 3

these bindings are intended for debugging. you can use the print
functions if you are curious, but be aware that resetting variables to
nil values could corrupt the torus data structure.

enter the prefix key, then :

  - =p= : menu to print variables

  - =z= : menu to reset variables


** shortcuts

i strongly suggest that you bind the functions you use most to quick
shortcuts. here are some examples :

#+begin_src emacs-lisp
  (global-set-key (kbd "<s-s-insert>") 'torus-add-circle)
  (global-set-key (kbd "<s-insert>") 'torus-add-here)

  (global-set-key (kbd "<s-delete>") 'torus-delete-location)
  (global-set-key (kbd "<s-s-delete>") 'torus-delete-circle)

  (global-set-key (kbd "<c-prior>") 'torus-previous-location)
  (global-set-key (kbd "<c-next>") 'torus-next-location)

  (global-set-key (kbd "<c-home>") 'torus-previous-circle)
  (global-set-key (kbd "<c-end>") 'torus-next-circle)

  (global-set-key (kbd "s-spc") 'torus-switch-circle)
  (global-set-key (kbd "s-=") 'torus-switch-location)
  (global-set-key (kbd "s-*") 'torus-switch-torus)

  (global-set-key (kbd "s-s") 'torus-search-location)
  (global-set-key (kbd "s-/") 'torus-search-circle)

  (global-set-key (kbd "<s-prior>") 'torus-history-newer)
  (global-set-key (kbd "<s-next>") 'torus-history-older)

  (global-set-key (kbd "c-^") 'torus-alternate)

  (global-set-key (kbd "<s-home>") 'torus-alternate-in-other-circle)
  (global-set-key (kbd "<s-end>") 'torus-alternate-in-same-circle)
#+end_src


* mouse


** on the tab bar

if you set ~torus-display-tab-bar~ to ~t~, a minimalist tab bar will
take place on the top of your torus buffers. appearence :

#+begin_example
current-torus-name >> current-circle-name > current-location | location-2 | location-3 | ...
#+end_example

you can click on it to navigate :

  - torus name region

    + left click : switch torus with completion

    + right click : search on all locations of the wheel

    + wheel : next / previous torus

  - circle name region

    + left click : switch circle with completion

    + right click : search on all locations of the current torus

    + wheel : next / previous circle

  - location region

    + left click

      * current location : alternate two last locations in same circle

      * other locations : go to that location

    + right click : switch location with completion

    + wheel : next / previous location


* configuration

here is a sample configuration :

#+begin_src emacs-lisp
  (require 'duo)

  (duo-init "duo-common" "duo-referen")

  (require 'torus)

  (setq torus-prefix-key "s-t")

  ;; range 0 -> 3
  ;; the bigger it is, the more bindings.
  (setq torus-binding-level 1)

  ;; created if non existent
  (setq torus-dirname "~/.emacs.d/torus")

  ;; set it to t if you want autoload of torus on emacs startup
  (setq torus-load-on-startup t)

  ;; set it to t if you want autosave of torus on emacs exit
  (setq torus-save-on-exit t)

  ;; where to auto load & save torus
  ;; will be expanded in <torus-dirname>/auto.el
  (setq torus-autoread-file "auto")
  (setq torus-autowrite-file torus-autoread-file)

  ;; number of backups you want
  ;; they will be numbered your-file.el.1 to your-file.el.n
  (setq torus-backup-number 5)

  (setq torus-history-maximum-elements 50)

  ;; whether to add new elements after current one or at the end
  (setq torus-add-after-current t)

  (setq torus-maximum-horizontal-split 3)
  (setq torus-maximum-vertical-split 4)

  ;; format :
  ;; torus >> circle > file : line | [* current-file : line *] | file : line | ...
  (setq torus-display-tab-bar t)

  ;; whether do display line nr. or position beside each file/buffer
  (setq torus-display-position nil)

  ;; 0 = most compact ... 3 = widest
  (setq torus-dashboard-size 2)

  (torus-init)

  (torus-install-default-bindings)
#+end_src


** [[https://github.com/jwiegley/use-package][Use-package]]


*** Minimal config


#+begin_src emacs-lisp
;; Recommended
(use-package which-key
  :init (which-key-mode)
  :custom ((which-key-idle-delay 1.0)))
(use-package helm
  :config (helm-mode 1))
;; Necessary
(use-package duo
  :config
  (duo-init "duo-common" "duo-referen"))
(use-package torus
  :after (duo)
  :config
  (torus-init)
  (torus-install-default-bindings))
#+end_src


*** Advanced

If you declare Torus with ~use-package~ and want the start & quit hooks
to load & save your torus file, you need to add a ~:hook~ section to
the declaration. This declaration gathers main options and keybindings :

#+begin_src emacs-lisp
  (use-package duo
    :config
    (duo-init "duo-common" "duo-referen"))

  (use-package torus
    :after (duo)
    :bind-keymap ("s-t" . torus-map)
    :bind (("<s-insert>" . torus-add-here)
           ("s-f" . torus-add-file)
           ("s-b" . torus-add-buffer)
           ("<S-s-insert>" . torus-add-circle)
           ("<s-delete>" . torus-delete-location)
           ("<S-s-delete>" . torus-delete-circle)
           ("<C-prior>" . torus-previous-location)
           ("<C-next>" . torus-next-location)
           ("<C-home>" . torus-previous-circle)
           ("<C-end>" . torus-next-circle)
           ("s-SPC" . torus-switch-location)
           ("s-=" . torus-switch-circle)
           ("s-*" . torus-switch-torus)
           ("s-s" . torus-search-location)
           ("s-/" . torus-search-circle)
           ("<S-prior>" . torus-newer)
           ("<S-next>" . torus-older)
           ("C-^" . torus-alternate)
           ("s-^" . torus-alternate-menu)
           ("<S-home>" . torus-alternate-in-same-torus-other-circle)
           ("<S-end>" . torus-alternate-in-same-circle)
           ("<M-prior>" . torus-move-location-backward)
           ("<M-next>" . torus-move-location-forward)
           ("<M-home>" . torus-rotate-circle-left)
           ("<M-end>" . torus-rotate-circle-right)
           ("s-%" . torus-layout-menu)
           ("s-g" . torus-autogroup-menu)
           :map torus-map
           ("y" . torus-copy-location-to-circle))
           ("Y" . torus-copy-circle-to-torus))
    :hook ((emacs-startup . torus-hello)
           (kill-emacs . torus-bye))
    :custom ((torus-prefix-key "s-t")
             (torus-binding-level 2)
             (torus-verbosity 1)
             (torus-dirname "~/.emacs.d/torus")
             (torus-load-on-startup t)
             (torus-save-on-exit t)
             (torus-autoread-file "auto")
             (torus-autowrite-file "auto")
             (torus-backup-number 5)
             (torus-history-maximum-elements 50)
             (torus-maximum-horizontal-split 3)
             (torus-maximum-vertical-split 4)
             (torus-display-tab-bar t)
	     (torus-display-position nil)
	     (torus-dashboard-size 2)
             (torus-prefix-separator " : ")
             (torus-join-separator " & "))
    :config
    (torus-init)
    (torus-install-default-bindings))
#+end_src


* Technical


** Structure

Data structure :

#+begin_src artist
                           wheel
                         +---+---+      +---------------------+--------------+
                   +-----+   |   +------+ current torus index | wheel length |
                   |     +---+---+      +---------------------+--------------+
                   |
                   |
              +----+----+---------+---------+-------+---------+
              | torus 1 | torus 2 | torus 3 | ...   | torus M |
              +---------+----+----+---------+-------+---------+
                             |
                   +---------+
                   |
               +---+---+ torus root
          +----+   |   +----+
          |    +---+---+    |
          |                 |
          |                 |
  +-------+------+      +---+---+     +----------------------+--------------+
  | "torus name" |      |   |   +-----+ current circle index | torus length |
  +--------------+      +-+-+---+     +----------------------+--------------+
                          |
                +---------+
                |
          +-----+----+----------+----------+-------+----------+
          | circle 1 | circle 2 | circle 3 | ...   | circle N |
          +----------+----------+-----+----+-------+----------+
                                      |
                   +------------------+
                   |
               +---+---+ circle root
          +----+   |   +---+
          |    +---+---+   |
          |                |
          |                |
  +-------+-------+    +---+---+   +------------------------+---------------+
  | "circle name" |    |   |   +---+ current location index | circle length |
  +---------------+    +-+-+---+   +------------------------+---------------+
                         |
           +-------------+
           |
     +-----+------+------------+------------+-------+------------+
     | location 1 | location 2 | location 3 | ...   | location P |
     +------------+------+-----+------------+-------+------------+
                         |
                         |
                         |
                +--------+----------+
                | "file" | position |
                +--------+----------+
#+end_src


* Changelog

  - version 2.2
    + roll circle, torus, wheel to beg or end
  - version 2.1
    + move / copy circle to torus
    + tab bar
      * more customizable
      * can adapt to  window size
  - version 2.0
    + change of data structure
    + use duo library for list operations
    + avoid too much cache variables, just use references
  - version 1.10
    + search in all toruses
    + previous and next torus
    + move torus
    + copy & move circle to torus
    + mouse support in tab bar
    + batch operations
  - version 1.9 : backup of torus files
  - version 1.8 : tab bar
  - version 1.7 : autogroups, layout
  - version 1.6 : join, ready for MELPA
  - version 1.2 - 1.5 : move, copy, reverse, history, split, alternate
  - version 1.1 : input history
  - version 1.0 : switch
  - before : lost in the mist of prehistory


* Author & Licence

  - Copyright (C) 2019 Chimay
  - Licensed under GPL v2


* Warning

Despite abundant testing, some bugs might remain, so be careful.


# Local Variables:
# indent-tabs-mode: nil
# End:
